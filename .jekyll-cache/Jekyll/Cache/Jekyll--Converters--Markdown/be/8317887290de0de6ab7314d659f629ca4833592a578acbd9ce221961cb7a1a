I"âå<hr />

<p><a href="https://en.wikipedia.org/wiki/Salesforce"> Salesforce.com, inc.</a> is an American cloud-based software company headquartered in San Francisco, California. It provides customer relationship management (CRM) service and also sells a complementary suite of enterprise applications focused on customer service, marketing automation, analytics, and application development (Wikipedia).</p>

<p>The data set is from <a href="https://www.alphavantage.co/#about"> alphavantage </a>. It is very easy to obtain the stock price information from the website. Just follow the documentation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># API Key:LX71H2XX0HSO5PAO 
</span></code></pre></div></div>

<p>Letâ€™s upload required libraryâ€¦</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">stats</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="k">as</span> <span class="n">sm</span>
<span class="kn">import</span> <span class="nn">warnings</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">product</span>

<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">'ignore'</span><span class="p">)</span>
<span class="c1"># plt.style.use('seaborn-poster')
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># getting the data from aplhavantage using API key
</span><span class="n">url</span> <span class="o">=</span> <span class="s">'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&amp;symbol=CRM&amp;outputsize=full&amp;apikey=LX71H2XX0HSO5PAO'</span>
<span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="n">resp</span><span class="p">.</span><span class="n">json</span><span class="p">()[</span><span class="s">'Meta Data'</span><span class="p">]</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{'1. Information': 'Daily Time Series with Splits and Dividend Events',
 '2. Symbol': 'CRM',
 '3. Last Refreshed': '2020-02-21',
 '4. Output Size': 'Full size',
 '5. Time Zone': 'US/Eastern'}
</code></pre></div></div>

<p>As you can see, the Meta Data node contains the data that we need.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">json</span><span class="p">()[</span><span class="s">'Time Series (Daily)'</span><span class="p">])</span> <span class="c1"># converting json to dataframe
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">.</span><span class="n">tail</span><span class="p">()</span> <span class="c1"># initial look of df
</span></code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>2020-02-21</th>
      <th>2020-02-20</th>
      <th>2020-02-19</th>
      <th>2020-02-18</th>
      <th>2020-02-14</th>
      <th>2020-02-13</th>
      <th>2020-02-12</th>
      <th>2020-02-11</th>
      <th>2020-02-10</th>
      <th>2020-02-07</th>
      <th>...</th>
      <th>2004-07-07</th>
      <th>2004-07-06</th>
      <th>2004-07-02</th>
      <th>2004-07-01</th>
      <th>2004-06-30</th>
      <th>2004-06-29</th>
      <th>2004-06-28</th>
      <th>2004-06-25</th>
      <th>2004-06-24</th>
      <th>2004-06-23</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>4. close</td>
      <td>189.5000</td>
      <td>193.3600</td>
      <td>192.8700</td>
      <td>191.0900</td>
      <td>189.9500</td>
      <td>188.6400</td>
      <td>189.4600</td>
      <td>189.1100</td>
      <td>189.1200</td>
      <td>185.7200</td>
      <td>...</td>
      <td>16.3100</td>
      <td>17.0000</td>
      <td>16.9800</td>
      <td>16.0300</td>
      <td>16.0700</td>
      <td>16.4000</td>
      <td>16.0000</td>
      <td>15.8000</td>
      <td>16.7600</td>
      <td>17.2000</td>
    </tr>
    <tr>
      <td>5. adjusted close</td>
      <td>189.5000</td>
      <td>193.3600</td>
      <td>192.8700</td>
      <td>191.0900</td>
      <td>189.9500</td>
      <td>188.6400</td>
      <td>189.4600</td>
      <td>189.1100</td>
      <td>189.1200</td>
      <td>185.7200</td>
      <td>...</td>
      <td>4.0775</td>
      <td>4.2500</td>
      <td>4.2450</td>
      <td>4.0075</td>
      <td>4.0175</td>
      <td>4.1000</td>
      <td>4.0000</td>
      <td>3.9500</td>
      <td>4.1900</td>
      <td>4.3000</td>
    </tr>
    <tr>
      <td>6. volume</td>
      <td>5241904</td>
      <td>5449529</td>
      <td>3901401</td>
      <td>4957013</td>
      <td>3598651</td>
      <td>3129214</td>
      <td>4533345</td>
      <td>4298229</td>
      <td>3872433</td>
      <td>3712487</td>
      <td>...</td>
      <td>446900</td>
      <td>304200</td>
      <td>248300</td>
      <td>438700</td>
      <td>521900</td>
      <td>528000</td>
      <td>567700</td>
      <td>1677500</td>
      <td>2221800</td>
      <td>10893600</td>
    </tr>
    <tr>
      <td>7. dividend amount</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>...</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
      <td>0.0000</td>
    </tr>
    <tr>
      <td>8. split coefficient</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>...</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
      <td>1.0000</td>
    </tr>
  </tbody>
</table>
<p>5 rows Ã— 3944 columns</p>
</div>

<p>We need to transpose our table to have proper format for the analysis and forecasting. Rows will be columsn, and columns should be converted to rows.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># saving as csv
# df.to_csv('CRM_stock')
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># transposing the dataframe
</span><span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>
<span class="n">df_transposed</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">transpose</span><span class="p">().</span><span class="n">set_index</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_transposed</span><span class="p">.</span><span class="n">head</span><span class="p">()</span> <span class="c1"># initial look
</span></code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>1. open</th>
      <th>2. high</th>
      <th>3. low</th>
      <th>4. close</th>
      <th>5. adjusted close</th>
      <th>6. volume</th>
      <th>7. dividend amount</th>
      <th>8. split coefficient</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2020-02-21</td>
      <td>191.8400</td>
      <td>192.0400</td>
      <td>186.7200</td>
      <td>189.5000</td>
      <td>189.5000</td>
      <td>5241904</td>
      <td>0.0000</td>
      <td>1.0000</td>
    </tr>
    <tr>
      <td>2020-02-20</td>
      <td>194.0000</td>
      <td>195.7200</td>
      <td>189.7700</td>
      <td>193.3600</td>
      <td>193.3600</td>
      <td>5449529</td>
      <td>0.0000</td>
      <td>1.0000</td>
    </tr>
    <tr>
      <td>2020-02-19</td>
      <td>192.0000</td>
      <td>193.9200</td>
      <td>191.8000</td>
      <td>192.8700</td>
      <td>192.8700</td>
      <td>3901401</td>
      <td>0.0000</td>
      <td>1.0000</td>
    </tr>
    <tr>
      <td>2020-02-18</td>
      <td>190.9500</td>
      <td>191.5000</td>
      <td>188.9200</td>
      <td>191.0900</td>
      <td>191.0900</td>
      <td>4957013</td>
      <td>0.0000</td>
      <td>1.0000</td>
    </tr>
    <tr>
      <td>2020-02-14</td>
      <td>189.3500</td>
      <td>190.2500</td>
      <td>188.1000</td>
      <td>189.9500</td>
      <td>189.9500</td>
      <td>3598651</td>
      <td>0.0000</td>
      <td>1.0000</td>
    </tr>
  </tbody>
</table>
</div>

<p>Now that we have proper format, we should drop irrelevant columns. For simplicity, I will keep ajusted close, and volume columns.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># removing unused features
</span><span class="n">df_transposed</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'1. open'</span><span class="p">,</span><span class="s">'2. high'</span><span class="p">,</span> <span class="s">'3. low'</span><span class="p">,</span> <span class="s">'4. close'</span><span class="p">,</span><span class="s">'7. dividend amount'</span><span class="p">,</span><span class="s">'8. split coefficient'</span><span class="p">],</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_transposed</span><span class="p">.</span><span class="n">head</span><span class="p">()</span> 
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>5. adjusted close</th>
      <th>6. volume</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2020-02-21</td>
      <td>189.5000</td>
      <td>5241904</td>
    </tr>
    <tr>
      <td>2020-02-20</td>
      <td>193.3600</td>
      <td>5449529</td>
    </tr>
    <tr>
      <td>2020-02-19</td>
      <td>192.8700</td>
      <td>3901401</td>
    </tr>
    <tr>
      <td>2020-02-18</td>
      <td>191.0900</td>
      <td>4957013</td>
    </tr>
    <tr>
      <td>2020-02-14</td>
      <td>189.9500</td>
      <td>3598651</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># converting dtypes to float
</span><span class="n">df_transposed</span><span class="p">[</span><span class="s">'5. adjusted close'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_transposed</span><span class="p">[</span><span class="s">'5. adjusted close'</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
<span class="n">df_transposed</span><span class="p">[</span><span class="s">'6. volume'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_transposed</span><span class="p">[</span><span class="s">'6. volume'</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_transposed</span><span class="p">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># sorting in ascending format
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_transposed</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">df_transposed</span><span class="p">.</span><span class="n">index</span><span class="p">)</span> <span class="c1"># converting indices to datetime
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_transposed</span><span class="p">.</span><span class="n">index</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DatetimeIndex(['2004-06-23', '2004-06-24', '2004-06-25', '2004-06-28',
               '2004-06-29', '2004-06-30', '2004-07-01', '2004-07-02',
               '2004-07-06', '2004-07-07',
               ...
               '2020-02-07', '2020-02-10', '2020-02-11', '2020-02-12',
               '2020-02-13', '2020-02-14', '2020-02-18', '2020-02-19',
               '2020-02-20', '2020-02-21'],
              dtype='datetime64[ns]', length=3944, freq=None)
</code></pre></div></div>

<p>Letâ€™s split the data to weekly,monthly, quarterly, and yearly basis. There is no actual purpose for doing  it. I just want to see how the stock price action looks on the chart on various time-frames.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># resampling to weekly, monthly, quarterly and yearly periods
</span>
<span class="n">df_weekly</span> <span class="o">=</span> <span class="n">df_transposed</span><span class="p">.</span><span class="n">resample</span><span class="p">(</span><span class="s">'W'</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
<span class="n">df_monthly</span> <span class="o">=</span> <span class="n">df_transposed</span><span class="p">.</span><span class="n">resample</span><span class="p">(</span><span class="s">'M'</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
<span class="n">df_quart</span> <span class="o">=</span> <span class="n">df_transposed</span><span class="p">.</span><span class="n">resample</span><span class="p">(</span><span class="s">'Q-DEC'</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
<span class="n">df_annual</span> <span class="o">=</span> <span class="n">df_transposed</span><span class="p">.</span><span class="n">resample</span><span class="p">(</span><span class="s">'A-DEC'</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_weekly</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>5. adjusted close</th>
      <th>6. volume</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2004-06-27</td>
      <td>4.146667</td>
      <td>4.930967e+06</td>
    </tr>
    <tr>
      <td>2004-07-04</td>
      <td>4.074000</td>
      <td>4.609200e+05</td>
    </tr>
    <tr>
      <td>2004-07-11</td>
      <td>4.090625</td>
      <td>3.612750e+05</td>
    </tr>
    <tr>
      <td>2004-07-18</td>
      <td>3.991000</td>
      <td>4.952800e+05</td>
    </tr>
    <tr>
      <td>2004-07-25</td>
      <td>3.489500</td>
      <td>2.005720e+06</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plots
</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">'CRM Price, mean USD'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">221</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">df_weekly</span><span class="p">[</span><span class="s">'5. adjusted close'</span><span class="p">],</span> <span class="s">'-'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'By Week'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">222</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">[</span><span class="s">'5. adjusted close'</span><span class="p">],</span> <span class="s">'-'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'By Months'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">223</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">df_quart</span><span class="p">[</span><span class="s">'5. adjusted close'</span><span class="p">],</span> <span class="s">'-'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'By Quarter'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">224</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">df_annual</span><span class="p">[</span><span class="s">'5. adjusted close'</span><span class="p">],</span> <span class="s">'-'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'By Year'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>

<span class="c1"># plt.tight_layout()
</span><span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/salesforce_timeseries_files/salesforce_timeseries_22_0.png" alt="png" /></p>

<p>We can see on the graph when we take average of larger time periods the line gets smoother and smoother. I will predict monthly stock price of the Salesforce Inc.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># rename price column
</span><span class="k">def</span> <span class="nf">rename_col</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">col</span><span class="p">):</span>
    <span class="n">df</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="n">col</span><span class="p">:</span> <span class="s">"Price"</span><span class="p">},</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#renaming
</span><span class="n">rename_col</span><span class="p">(</span><span class="n">df_weekly</span><span class="p">,</span><span class="s">'5. adjusted close'</span><span class="p">)</span>
<span class="n">rename_col</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">,</span><span class="s">'5. adjusted close'</span><span class="p">)</span>
<span class="n">rename_col</span><span class="p">(</span><span class="n">df_quart</span><span class="p">,</span><span class="s">'5. adjusted close'</span><span class="p">)</span>
<span class="n">rename_col</span><span class="p">(</span><span class="n">df_annual</span><span class="p">,</span><span class="s">'5. adjusted close'</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="stationarity-check">Stationarity Check</h1>

<p>In statistic, and in time-series analysis we need to check the data for stationarity. If the data is non-stationary we convert to stationary.</p>

<p>In the most intuitive sense, <a href="https://towardsdatascience.com/stationarity-in-time-series-analysis-90c94f27322"> stationarity </a> means that the statistical properties of a process generating a time series do not change over time.</p>

<p>Little function below plots seasonal decomposition of a time-series data, and returns p-value of Dickey-Fuller test.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># dickey-fuller test for stationary check
</span><span class="k">def</span> <span class="nf">DF_test</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
    <span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">seasonal_decompose</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">Price</span><span class="p">).</span><span class="n">plot</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Dickeyâ€“Fuller test: p=%f"</span> <span class="o">%</span> <span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">stattools</span><span class="p">.</span><span class="n">adfuller</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">Price</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="dickey-fuller-test">Dickey-Fuller Test</h2>

<p>In statistics, the Dickeyâ€“Fuller test tests the null hypothesis that a unit root is present in an autoregressive model. The alternative hypothesis is different depending on which version of the test is used, but is usually stationarity or trend-stationarity. It is named after the statisticians David Dickey and Wayne Fuller, who developed the test in 1979 (<a href="https://en.wikipedia.org/wiki/Dickeyâ€“Fuller_test">Wikipedia</a>)</p>

<h3 id="seasonal-decomposition">Seasonal Decomposition</h3>

<p>It is a technique to analyze time-series data. Obeserved data is split into 3 parts: Trend, Seasonal, and Residuals (noise).</p>

<ul>
  <li>Trend is basically direction of an obeserved data at a time. In our case, the stock price is in up-trend.</li>
  <li>Seasonal data reveals patterns in data that is affected by seasonal factors, and itâ€™s repeatly occurs within certain time-frame.</li>
  <li>Residuals is a noise in the data. It is a remainder when trend and seasonality are removed.</li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/Decomposition_of_time_series"> Learn more </a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DF_test</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dickeyâ€“Fuller test: p=1.000000



&lt;Figure size 720x360 with 0 Axes&gt;
</code></pre></div></div>

<p><img src="/images/salesforce_timeseries_files/salesforce_timeseries_31_2.png" alt="png" /></p>

<p>Dickey-Fuller test indicates that the data is not stationary as we can see on the graph. P-value is 1.0. We failed to reject null-hypothesis that our data is stationary. P-value should less than or equal to 0.05.</p>

<p>To achieve stationary state we can do various data tranformations. For example, letâ€™s try box-cox transformationa and see if we the data stationaryâ€¦</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Box-Cox Transformations
</span><span class="k">def</span> <span class="nf">box_cox</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">df</span><span class="p">[</span><span class="s">'Price_box'</span><span class="p">],</span> <span class="n">lmbda</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">boxcox</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'Price'</span><span class="p">])</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Dickeyâ€“Fuller test: p=%f"</span> <span class="o">%</span> <span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">stattools</span><span class="p">.</span><span class="n">adfuller</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'Price_box'</span><span class="p">])[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_monthly</span><span class="p">[</span><span class="s">'Price_box'</span><span class="p">],</span> <span class="n">lmbda</span> <span class="o">=</span> <span class="n">stats</span><span class="p">.</span><span class="n">boxcox</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">[</span><span class="s">'Price'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Dickeyâ€“Fuller test: p=%f"</span> <span class="o">%</span> <span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">stattools</span><span class="p">.</span><span class="n">adfuller</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">[</span><span class="s">'Price_box'</span><span class="p">])[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dickeyâ€“Fuller test: p=0.871254
</code></pre></div></div>

<p>After Box-Cox transformation our data is still non-stationary. Letâ€™s apply log transformation on the data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># log tranformation
</span><span class="k">def</span> <span class="nf">log_transformation</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">df</span><span class="p">[</span><span class="s">'price_log'</span><span class="p">]</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Price'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Dickeyâ€“Fuller test: p=%f"</span> <span class="o">%</span> <span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">stattools</span><span class="p">.</span><span class="n">adfuller</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'price_log'</span><span class="p">])[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># log tranformation
</span><span class="n">log_transformation</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

&lt;ipython-input-2-08a9f9683a50&gt; in &lt;module&gt;
      1 # log tranformation
----&gt; 2 log_transformation(df_monthly)


NameError: name 'log_transformation' is not defined
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Seasonal differentiation
</span><span class="n">df_monthly</span><span class="p">[</span><span class="s">'prices_box_diff'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_monthly</span><span class="p">.</span><span class="n">Price_box</span> <span class="o">-</span> <span class="n">df_monthly</span><span class="p">.</span><span class="n">Price_box</span><span class="p">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Dickeyâ€“Fuller test: p=%f"</span> <span class="o">%</span> <span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">stattools</span><span class="p">.</span><span class="n">adfuller</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">.</span><span class="n">prices_box_diff</span><span class="p">[</span><span class="mi">12</span><span class="p">:])[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dickeyâ€“Fuller test: p=0.003912
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">seasonal_decompose</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">[</span><span class="s">'prices_box_diff'</span><span class="p">][</span><span class="mi">13</span><span class="p">:]).</span><span class="n">plot</span><span class="p">()</span>   
<span class="k">print</span><span class="p">(</span><span class="s">"Dickeyâ€“Fuller test: p=%f"</span> <span class="o">%</span> <span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">stattools</span><span class="p">.</span><span class="n">adfuller</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">[</span><span class="s">'prices_box_diff'</span><span class="p">][</span><span class="mi">12</span><span class="p">:])[</span><span class="mi">1</span><span class="p">])</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dickeyâ€“Fuller test: p=0.003912
</code></pre></div></div>

<p><img src="/images/salesforce_timeseries_files/salesforce_timeseries_39_1.png" alt="png" /></p>

<ul>
  <li>Monthly data is stationarized</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># model selection
# Initial approximation of parameters using Autocorrelation and Partial Autocorrelation Plots
</span><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">211</span><span class="p">)</span>
<span class="n">sm</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">plot_acf</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">.</span><span class="n">prices_box_diff</span><span class="p">[</span><span class="mi">12</span><span class="p">:].</span><span class="n">values</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(),</span> <span class="n">lags</span><span class="o">=</span><span class="mi">48</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">212</span><span class="p">)</span>
<span class="n">sm</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">plot_pacf</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">.</span><span class="n">prices_box_diff</span><span class="p">[</span><span class="mi">12</span><span class="p">:].</span><span class="n">values</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(),</span> <span class="n">lags</span><span class="o">=</span><span class="mi">48</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/salesforce_timeseries_files/salesforce_timeseries_41_0.png" alt="png" /></p>

<ul>
  <li>Initial parameters according to the graph above:
    <ul>
      <li>P (0-2)</li>
      <li>D (0)</li>
      <li>Q (0-5)</li>
      <li>seasonality (12)</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># fitting to the model
# MA, AR values
</span><span class="n">p</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">q</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>

<span class="c1"># seasonal order
</span><span class="n">P</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">D</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">Q</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>


<span class="n">parameters</span> <span class="o">=</span> <span class="n">product</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">)</span>
<span class="n">parameters_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>

<span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">best_aic</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">"inf"</span><span class="p">)</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">'ignore'</span><span class="p">)</span>

<span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">parameters_list</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">model</span><span class="o">=</span><span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">statespace</span><span class="p">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">.</span><span class="n">Price_box</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="n">param</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">d</span><span class="p">,</span><span class="n">param</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> 
                                        <span class="n">seasonal_order</span><span class="o">=</span><span class="p">(</span><span class="n">param</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">d</span><span class="p">,</span><span class="n">param</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="mi">12</span><span class="p">)).</span><span class="n">fit</span><span class="p">(</span><span class="n">disp</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'wrong parameters:'</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
        <span class="k">continue</span>
    <span class="n">aic</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">aic</span>
    <span class="k">if</span> <span class="n">aic</span> <span class="o">&lt;</span> <span class="n">best_aic</span><span class="p">:</span>
        <span class="n">best_model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">best_aic</span> <span class="o">=</span> <span class="n">aic</span>
        <span class="n">best_param</span> <span class="o">=</span> <span class="n">param</span>
        <span class="n">results</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">param</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">aic</span><span class="p">])</span>    

        

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Best Models
</span><span class="n">result_table</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
<span class="n">result_table</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'parameters'</span><span class="p">,</span> <span class="s">'aic'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">result_table</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'aic'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">head</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">best_model</span><span class="p">.</span><span class="n">summary</span><span class="p">())</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     parameters         aic
2  (1, 0, 0, 1) -172.505623
1  (0, 0, 0, 1) -162.739139
0  (0, 0, 0, 0)  -62.580627
                                 Statespace Model Results                                 
==========================================================================================
Dep. Variable:                          Price_box   No. Observations:                  189
Model:             SARIMAX(1, 1, 1)x(0, 1, 1, 12)   Log Likelihood                  90.253
Date:                            Sun, 23 Feb 2020   AIC                           -172.506
Time:                                    20:45:55   BIC                           -159.824
Sample:                                06-30-2004   HQIC                          -167.362
                                     - 02-29-2020                                         
Covariance Type:                              opg                                         
==============================================================================
                 coef    std err          z      P&gt;|z|      [0.025      0.975]
------------------------------------------------------------------------------
ar.L1         -0.0548      0.261     -0.210      0.834      -0.566       0.456
ma.L1          0.3371      0.264      1.277      0.202      -0.180       0.854
ma.S.L12      -0.9899      1.316     -0.752      0.452      -3.569       1.589
sigma2         0.0175      0.023      0.778      0.437      -0.027       0.062
===================================================================================
Ljung-Box (Q):                       32.69   Jarque-Bera (JB):                62.34
Prob(Q):                              0.79   Prob(JB):                         0.00
Heteroskedasticity (H):               0.40   Skew:                            -0.76
Prob(H) (two-sided):                  0.00   Kurtosis:                         5.49
===================================================================================

Warnings:
[1] Covariance matrix calculated using the outer product of gradients (complex-step).
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># STL-decomposition
</span><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">211</span><span class="p">)</span>
<span class="n">best_model</span><span class="p">.</span><span class="n">resid</span><span class="p">[</span><span class="mi">12</span><span class="p">:].</span><span class="n">plot</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">u'Residuals'</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">212</span><span class="p">)</span>
<span class="n">sm</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">plot_acf</span><span class="p">(</span><span class="n">best_model</span><span class="p">.</span><span class="n">resid</span><span class="p">[</span><span class="mi">13</span><span class="p">:].</span><span class="n">values</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(),</span> <span class="n">lags</span><span class="o">=</span><span class="mi">48</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Dickeyâ€“Fuller test:: p=%f"</span> <span class="o">%</span> <span class="n">sm</span><span class="p">.</span><span class="n">tsa</span><span class="p">.</span><span class="n">stattools</span><span class="p">.</span><span class="n">adfuller</span><span class="p">(</span><span class="n">best_model</span><span class="p">.</span><span class="n">resid</span><span class="p">[</span><span class="mi">13</span><span class="p">:])[</span><span class="mi">1</span><span class="p">])</span>

<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dickeyâ€“Fuller test:: p=0.000000
</code></pre></div></div>

<p><img src="/images/salesforce_timeseries_files/salesforce_timeseries_45_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">len</span><span class="p">(</span><span class="n">df_monthly</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>189
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Inverse Box-Cox Transformation Function
</span><span class="k">def</span> <span class="nf">invboxcox</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">lmbda</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">lmbda</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">lmbda</span><span class="o">*</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">lmbda</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Prediction
</span>
<span class="n">df_month2</span> <span class="o">=</span> <span class="n">df_monthly</span><span class="p">[[</span><span class="s">'Price'</span><span class="p">]]</span>

<span class="n">date_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">29</span><span class="p">),</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span> 
             <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span> 
             <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span> 
             <span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">31</span><span class="p">),</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">30</span><span class="p">)]</span>

<span class="n">future</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">date_list</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span> <span class="n">df_monthly</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>
<span class="n">df_month2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_month2</span><span class="p">,</span> <span class="n">future</span><span class="p">])</span>
<span class="n">df_month2</span><span class="p">[</span><span class="s">'forecast'</span><span class="p">]</span> <span class="o">=</span> <span class="n">invboxcox</span><span class="p">((</span><span class="n">best_model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="mi">200</span><span class="p">)),</span><span class="n">lmbda</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">df_month2</span><span class="p">.</span><span class="n">Price</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>
<span class="n">df_month2</span><span class="p">.</span><span class="n">forecast</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s">'r'</span><span class="p">,</span> <span class="n">ls</span><span class="o">=</span><span class="s">'--'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'Predicted Price'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'CRM share price, by months'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'mean USD'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/salesforce_timeseries_files/salesforce_timeseries_48_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_month2</span><span class="p">.</span><span class="n">tail</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>6. volume</th>
      <th>Price</th>
      <th>Price_box</th>
      <th>price_log</th>
      <th>prices_box_diff</th>
      <th>forecast</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2020-02-29</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>188.345304</td>
    </tr>
    <tr>
      <td>2020-03-30</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <td>2020-04-30</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>198.720247</td>
    </tr>
    <tr>
      <td>2020-05-31</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>202.109957</td>
    </tr>
    <tr>
      <td>2020-06-30</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>202.907078</td>
    </tr>
    <tr>
      <td>2020-07-31</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>203.433275</td>
    </tr>
    <tr>
      <td>2020-08-31</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>204.383844</td>
    </tr>
    <tr>
      <td>2020-09-30</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>212.845838</td>
    </tr>
    <tr>
      <td>2020-10-31</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>213.022514</td>
    </tr>
    <tr>
      <td>2020-11-30</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>217.625027</td>
    </tr>
  </tbody>
</table>
</div>

:ET