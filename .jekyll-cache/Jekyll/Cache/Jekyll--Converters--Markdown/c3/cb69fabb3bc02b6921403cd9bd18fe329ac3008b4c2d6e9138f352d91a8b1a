I"£;<hr />

<p>‚ÄúA picture is worth a thousand words‚Äù</p>

<hr />
<div style="text-align: justify"> Machine Learning is a big field to be in. Sometimes you might get lost in it which happened to myself. I wanted to do everything. I did several projects, and finally I found a joy working with images, so I decided to specialize in application of deep learning in Computer Vision. </div>

<div style="text-align: justify"> There are multiples of image processing libraries such as **OpenCV, PILLOW, scikit-image, SciPy-Ndimage** etc. But I am not goin to use those here, instead I will try out simple techniques with Numpy. </div>

<div style="text-align: justify"> There are many great resources to learn Computer Vision. Currently, I am reading "Deep Learning for Computer Vision" by Adrian Rosebrock. </div>

<p>Link to his page: https://www.pyimagesearch.com/</p>

<p>Let‚Äôs load <strong>numpy</strong> and <strong>matplotlib</strong> packages.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pylab</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<hr />
<p>Let‚Äôs upload the picture. The astype(‚Äòfloat32‚Äô) converts the image to float, and dividing it to 255 makes sure that the pixel value range will be in [0, 1] range rather than [0, 255] range.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># uploading an image
</span><span class="n">img</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'jailoo.jpeg'</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'float32'</span><span class="p">)</span><span class="o">/</span> <span class="mi">255</span> 
<span class="k">print</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(2448, 3264, 3)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/image_preprocessing_files/image_preprocessing_8_0.png" alt="png" /></p>

<p><strong><em>I took this picutre in 2015, in Naryn, Kyrgyzstan.</em></strong></p>

<h3 id="now-lets-look-at-the-basic-properties-of-the-image">Now, let‚Äôs look at the basic properties of the image.</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'Type of the image : '</span> <span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">img</span><span class="p">))</span>
<span class="k">print</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Shape of the image : {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Image Hight {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Image Width {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Dimension of Image {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">ndim</span><span class="p">))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Type of the image :  &lt;class 'numpy.ndarray'&gt;

Shape of the image : (2448, 3264, 3)
Image Hight 2448
Image Width 3264
Dimension of Image 3
</code></pre></div></div>

<p>The picture is <strong>2448 x 3264 x 3</strong> dimensional array. First two numbers are {<strong>Y</strong> for <strong>height</strong> and <strong>X</strong> for <strong>width</strong>}, the last value is <strong>RGB</strong> value of the pciture. Basically we have 3 layered matrix that contains each RBG value for every single pixel of the picture.</p>

<p>We can get the total number of pixels, maximum and minimum of RGB values in the picture.</p>

<p>Total pixels = <strong>X</strong> x <strong>Y</strong> x <strong>3</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'Total number of pixels {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">size</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Max value of RGB {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="nb">max</span><span class="p">()))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Min value of RGB {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="nb">min</span><span class="p">()))</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Total number of pixels 23970816
Max value of RGB 1.0
Min value of RGB 0.0
</code></pre></div></div>

<h2 id="cropping"><strong>Cropping</strong></h2>

<p>We can easily cut out a piece of the picture just by slicing the arrays. For instance, I need only the car in the picture.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">[</span><span class="mi">900</span><span class="p">:,</span><span class="mi">750</span><span class="p">:</span><span class="mi">2300</span><span class="p">,:])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/image_preprocessing_files/image_preprocessing_16_0.png" alt="png" /></p>

<p><strong><em>RGB</em></strong> stands for <strong>Red, Blue and Green</strong>. Combination of these colors make up the entire spectre of colors. Each color (red, blue, green) takes values from <strong><em>0 to 255</em></strong>. If the value is <strong>0</strong> then it is <strong>black</strong>, if it is <strong>255</strong> then the color is <strong>white</strong>.</p>

<p><strong><em>In this case, pixel values are in [0,1] range since we standardized it by dividing it to 255.</em></strong></p>

<p>We can pick specific pixel in the picture and see its RGB value. Let‚Äôs do that!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># little function to get pixel values
</span>
<span class="k">def</span> <span class="nf">show_rgb</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">):</span>
    <span class="s">"""
    y - height
    x - width
    """</span>
    <span class="k">return</span> <span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">]</span>

<span class="c1"># let's see what are the RGB values of the pixel at 1500th row, 1500th column
</span><span class="n">show_rgb</span><span class="p">(</span><span class="n">img</span><span class="p">,</span><span class="mi">1500</span><span class="p">,</span><span class="mi">1500</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([0.1882353 , 0.39215687, 0.54509807], dtype=float32)
</code></pre></div></div>

<p>Each index value corresponds to RGB value of a pixel:</p>

<ul>
  <li>
    <font color="red"> **Index 0 - Red = 0.1882353** </font>
  </li>
  <li>
    <font color="green"> **Index 1 - Green = 0.39215687** </font>
  </li>
  <li>
    <font color="blue"> **Index 2 - Blue = 0.54509807** </font>
  </li>
</ul>

<h2 id="splitting-into-channels"><strong>Splitting Into Channels</strong></h2>

<h3 id="we-can-see-the-picture-from-each-color-channel">We can see the picture from each color channel:</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Red channel'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">[:,</span> <span class="p">:</span> <span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/image_preprocessing_files/image_preprocessing_22_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Green channel'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">[:,</span> <span class="p">:</span> <span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/image_preprocessing_files/image_preprocessing_23_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Blue channel'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">[:,</span> <span class="p">:</span> <span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/image_preprocessing_files/image_preprocessing_24_0.png" alt="png" /></p>

<p><strong>Splitting the picture by channels:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">image</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="s">'jailoo.jpeg'</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>

<span class="k">for</span> <span class="n">c</span><span class="p">,</span> <span class="n">ax</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">axs</span><span class="p">):</span>
    <span class="n">img_</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s">"uint8"</span><span class="p">)</span>
    <span class="n">img_</span><span class="p">[:,:,</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="n">image</span><span class="p">[:,:,</span><span class="n">c</span><span class="p">]</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img_</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_axis_off</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/image_preprocessing_files/image_preprocessing_26_0.png" alt="png" /></p>

<p>That‚Äôs it for now. There are many complex and very interesting image processing techniques you can apply using powerful image processing libraries. For example, you can explore <strong><em>matplotlib</em></strong>.</p>

<p>Convert RGB to HSV color-space.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">matplotlib.colors</span> <span class="kn">import</span> <span class="n">rgb_to_hsv</span>
<span class="n">hsv_image</span> <span class="o">=</span> <span class="n">rgb_to_hsv</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">hsv_image</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/image_preprocessing_files/image_preprocessing_29_0.png" alt="png" /></p>

:ET