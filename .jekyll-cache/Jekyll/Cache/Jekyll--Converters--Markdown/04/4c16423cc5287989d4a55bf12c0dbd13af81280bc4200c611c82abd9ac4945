I"	Y<hr />

<p>Today we will try to build face recognition algorithm that tells you who is in fron of the camera. To do that, we need sample of training data. For the simplicity, I used my own pictures, and dowloanded from internet pictures of GOT stars - Kit Harrington, and Lena Headey.</p>

<p>This project is inspired from <a href="https://www.codingforentrepreneurs.com/"> codingforentrepreneurs youtube channel</a>.</p>

<p>Before starting make sure that you have opencv installed.</p>

<h2 id="building-the-model">Building the model</h2>

<p>First, we need to train our model on sample traingin data so it can recognize faces later on.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import packages
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">_testcapi</span> <span class="kn">import</span> <span class="n">DBL_MAX</span>

<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">pickle</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># define path to data-set
</span>
<span class="n">base_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>
<span class="n">image_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="s">'images'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># define our face-detection classifier
</span>
<span class="n">face_cascade</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">CascadeClassifier</span><span class="p">(</span><span class="s">'haarcascade_frontalface_default.xml'</span><span class="p">)</span>

<span class="c1"># creating face recognizer 
</span><span class="n">recognizer</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">face</span><span class="p">.</span><span class="n">LBPHFaceRecognizer_create</span><span class="p">(</span>
    <span class="n">neighbors</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
    <span class="n">radius</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">grid_x</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
    <span class="n">grid_y</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
    <span class="n">threshold</span><span class="o">=</span><span class="n">DBL_MAX</span>
<span class="p">)</span>

<span class="c1"># captures frames from our webcamer (0). 
# 0 means your first webcamera
</span><span class="n">cap</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">VideoCapture</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> 
</code></pre></div></div>

<p>There are other types of face recognizer model such as FisherFaces, and Eigen Faces. You can learn more about them here on this <a href="https://github.com/rragundez/PyData/blob/master/notebooks_tutorial/03_Building_the_Recognition_Model.ipynb">repo by Rodrigo Agundez</a>.</p>

<p>You can download cascade classifier from <a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">opencv github repo</a>. There several haarcascade classifiers, but we need <strong>‘haarcascade_frontalface_default.xml’</strong></p>

<p>Now let’s upload our data-set. We need to define labels, and traning data set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">current_id</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">label_ids</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">y_labels</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">x_train</span> <span class="o">=</span> <span class="p">[]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># uploading data set
</span><span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">image_dir</span><span class="p">):</span>
    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">file</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">"JPG"</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">file</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">"jpeg"</span><span class="p">):</span>
            <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
            <span class="n">label</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">basename</span><span class="p">(</span><span class="n">root</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">"-"</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
            <span class="c1"># print(label, path)
</span>            <span class="k">if</span> <span class="n">label</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">label_ids</span><span class="p">:</span>
                <span class="n">label_ids</span><span class="p">[</span><span class="n">label</span><span class="p">]</span> <span class="o">=</span> <span class="n">current_id</span>
                <span class="n">current_id</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">id_</span> <span class="o">=</span> <span class="n">label_ids</span><span class="p">[</span><span class="n">label</span><span class="p">]</span>
            
            <span class="n">pil_image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="n">convert</span><span class="p">(</span><span class="s">"L"</span><span class="p">)</span>  <span class="c1"># grayscale
</span>            <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">550</span><span class="p">,</span> <span class="mi">550</span><span class="p">)</span>
            <span class="n">final_image</span> <span class="o">=</span> <span class="n">pil_image</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">Image</span><span class="p">.</span><span class="n">ANTIALIAS</span><span class="p">)</span>
            <span class="n">image_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">final_image</span><span class="p">,</span> <span class="s">"uint8"</span><span class="p">)</span>
            
            <span class="n">faces</span> <span class="o">=</span> <span class="n">face_cascade</span><span class="p">.</span><span class="n">detectMultiScale</span><span class="p">(</span><span class="n">image_array</span><span class="p">,</span> <span class="n">scaleFactor</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">minNeighbors</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>

            <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span> <span class="ow">in</span> <span class="n">faces</span><span class="p">:</span>
                <span class="n">roi</span> <span class="o">=</span> <span class="n">image_array</span><span class="p">[</span><span class="n">y</span><span class="p">:</span><span class="n">y</span> <span class="o">+</span> <span class="n">h</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span> <span class="o">+</span> <span class="n">w</span><span class="p">]</span>
                <span class="n">x_train</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">roi</span><span class="p">)</span>
                <span class="n">y_labels</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">id_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># save labels as pickle file
</span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'labels.pickle'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pickle</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="n">label_ids</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="training-the-model">Training the model</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recognizer</span><span class="p">.</span><span class="n">train</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">y_labels</span><span class="p">))</span>
<span class="n">recognizer</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'trainer.yml'</span><span class="p">)</span>
</code></pre></div></div>

<p>Now we have finished building and training our model. Next, we will write our face detection algorithm. We saved our trained model as ‘<strong>trainer.yml</strong>’.</p>

<p><strong>Note</strong>: all of this codes are writen on PyCharm.</p>

<h2 id="model-implementation">Model implementation</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">pickle</span>

<span class="n">face_cascade</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">CascadeClassifier</span><span class="p">(</span><span class="s">'haarcascade_frontalface_default.xml'</span><span class="p">)</span>

<span class="n">cap</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">VideoCapture</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="c1"># window size
</span><span class="n">cap</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">cv2</span><span class="p">.</span><span class="n">CAP_PROP_FRAME_WIDTH</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
<span class="n">cap</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">cv2</span><span class="p">.</span><span class="n">CAP_PROP_FRAME_HEIGHT</span><span class="p">,</span> <span class="mi">250</span><span class="p">)</span>
<span class="n">cap</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">cv2</span><span class="p">.</span><span class="n">CAP_PROP_FPS</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>

<span class="n">recognizer</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">face</span><span class="p">.</span><span class="n">LBPHFaceRecognizer_create</span><span class="p">()</span>
<span class="n">recognizer</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="s">'trainer.yml'</span><span class="p">)</span>


<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'labels.pickle'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">og_labels</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">labels</span> <span class="o">=</span> <span class="p">{</span><span class="n">v</span><span class="p">:</span> <span class="n">k</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">og_labels</span><span class="p">.</span><span class="n">items</span><span class="p">()}</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="c1"># capture frame-by-frame
</span>    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cap</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    <span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
    <span class="n">faces</span> <span class="o">=</span> <span class="n">face_cascade</span><span class="p">.</span><span class="n">detectMultiScale</span><span class="p">(</span>
        <span class="n">gray</span><span class="p">,</span>
        <span class="n">scaleFactor</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
        <span class="n">minNeighbors</span><span class="o">=</span><span class="mi">5</span>
    <span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span> <span class="ow">in</span> <span class="n">faces</span><span class="p">:</span>
        <span class="c1"># print(x, y, w, h)
</span>        <span class="c1"># roi stands for 'region of interest'
</span>        <span class="n">roi_gray</span> <span class="o">=</span> <span class="n">gray</span><span class="p">[</span><span class="n">y</span><span class="p">:</span><span class="n">y</span><span class="o">+</span><span class="n">h</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="n">w</span><span class="p">]</span>
        <span class="n">roi_color</span> <span class="o">=</span> <span class="n">frame</span><span class="p">[</span><span class="n">y</span><span class="p">:</span><span class="n">y</span><span class="o">+</span><span class="n">h</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="n">w</span><span class="p">]</span>

        <span class="c1"># recognize?
</span>        <span class="n">id_</span><span class="p">,</span> <span class="n">conf</span> <span class="o">=</span> <span class="n">recognizer</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">roi_gray</span><span class="p">)</span>
        <span class="k">if</span> <span class="mi">45</span> <span class="o">&lt;=</span> <span class="n">conf</span> <span class="o">&lt;=</span> <span class="mi">85</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">id_</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="n">labels</span><span class="p">[</span><span class="n">id_</span><span class="p">])</span>
            <span class="n">font</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">FONT_HERSHEY_PLAIN</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">labels</span><span class="p">[</span><span class="n">id_</span><span class="p">]</span>
            <span class="n">color</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
            <span class="n">stroke</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="n">cv2</span><span class="p">.</span><span class="n">putText</span><span class="p">(</span>
                <span class="n">frame</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span>
                <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">font</span><span class="p">,</span>
                <span class="mi">1</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span>
                <span class="n">stroke</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">LINE_AA</span><span class="p">)</span>
        <span class="c1"># save img
</span>        <span class="n">img_item</span> <span class="o">=</span> <span class="s">'my_image.png'</span>
        <span class="n">cv2</span><span class="p">.</span><span class="n">imwrite</span><span class="p">(</span><span class="n">img_item</span><span class="p">,</span> <span class="n">roi_gray</span><span class="p">)</span>

        <span class="c1"># draw rectangle
</span>        <span class="c1"># BGR color
</span>        <span class="n">color</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">stroke</span> <span class="o">=</span> <span class="mi">2</span>
        <span class="n">end_cord_x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">w</span>
        <span class="n">end_cord_y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">h</span>
        <span class="n">cv2</span><span class="p">.</span><span class="n">rectangle</span><span class="p">(</span>
            <span class="n">frame</span><span class="p">,</span>
            <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span>
            <span class="p">(</span><span class="n">end_cord_x</span><span class="p">,</span> <span class="n">end_cord_y</span><span class="p">),</span>
            <span class="n">color</span><span class="p">,</span>
            <span class="n">stroke</span>
        <span class="p">)</span>
    <span class="c1"># Display the resulting time
</span>    <span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">'frame'</span><span class="p">,</span> <span class="n">frame</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="o">==</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'q'</span><span class="p">):</span>
        <span class="k">break</span>

<span class="c1"># When everything done, release the capture
</span><span class="n">cap</span><span class="p">.</span><span class="n">release</span><span class="p">()</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="results">Results</h2>

<p>The model is working, but it’s not identifing a person correctly. The reason is data. I have very small data set, and quality of pictures also  affecting the model. You can work with this model and try it. It’s fun!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
<p><img src="/images/face_rec/results/Screen Shot 2020-07-05 at 2.35.48 PM.png" alt="jpeg" />
<img src="/images/face_rec/results/Screen Shot 2020-07-05 at 2.36.22 PM.png" alt="jpeg" />
<img src="/images/face_rec/results/Screen Shot 2020-07-05 at 2.47.26 PM.png" alt="jpeg" />
<img src="/images/face_rec/results/Screen Shot 2020-07-05 at 2.47.47 PM.png" alt="jpeg" /></p>
:ET